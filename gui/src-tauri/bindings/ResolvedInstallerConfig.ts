// This file was generated by [ts-rs](https://github.com/Aleph-Alpha/ts-rs). Do not edit this file manually.
import type { PackageUrl } from "./PackageUrl";
import type { ReaperPlatform } from "./ReaperPlatform";
import type { ReaperResourceDir } from "./ReaperResourceDir";
import type { Recipe } from "./Recipe";
import type { VersionRef } from "./VersionRef";

/**
 * Resolved installer configuration (derived from the frontend installer config).
 */
export type ResolvedInstallerConfig = { 
/**
 * Resolved REAPER resource directory.
 */
reaper_resource_dir: ReaperResourceDir, 
/**
 * Path of the executable belonging to this installation.
 *
 * If this is a portable installation, this corresponds to the REAPER executable in the
 * portable directory (or `REAPER.app` bundle on macOS).
 *
 * If this is a main installation, this corresponds to the system-wide REAPER executable
 * created by a default REAPER installation. On Linux, this first tries the system-wide
 * location (`/opt/REAPER`) and then the user location (`$HOME/opt/reaper`).
 * install locations.
 */
reaper_exe: string, 
/**
 * Whether the resolved REAPER resource directory exists and has a "reaper.ini" file.
 */
reaper_ini_exists: boolean, 
/**
 * Whether the executable belonging to this installation exists.
 */
reaper_exe_exists: boolean, 
/**
 * Whether the resolved REAPER resource directory belongs to the main REAPER installation
 * or to a portable REAPER installation.
 */
portable: boolean, 
/**
 * Resolved REAPER platform.
 */
platform: ReaperPlatform, 
/**
 * Resolved package URLs.
 *
 * This includes manually configured packages, packages that will be installed anyway
 * and packages that were selected via features.
 */
package_urls: Array<PackageUrl>, num_download_retries: number, temp_parent_dir: string, keep_temp_dir: boolean, concurrent_downloads: number, dry_run: boolean, reaper_version: VersionRef, skip_failed_packages: boolean, update_reaper: boolean, install_reapack: boolean, recipe?: Recipe, };
